// import React, { useState, useEffect } from "react";
// import AdminLayout from "@/layouts/AdminLayout";
// import Head from "next/head";
// import DataTable from "react-data-table-component";
// import InputGroup from "react-bootstrap/InputGroup";
// import Form from "react-bootstrap/Form";
// import Image from "next/image";
// import Button from "react-bootstrap/Button";

// const columns = [
//   {
//     name: "Title",
//     selector: (row) => row.title,
//   },
//   {
//     name: "Year",
//     selector: (row) => row.year,
//   },
// ];

// const data = [
//   {
//     id: 1,
//     title: "Beetlejuice",
//     year: "1988",
//   },
//   {
//     id: 2,
//     title: "Ghostbusters",
//     year: "1984",
//   },
// ];

// export default function Occupations() {
//   const [domLoaded, setDomLoaded] = useState(false);
//   useEffect(() => {
//     setDomLoaded(true);
//   }, []);
//   return (
//     <div>
//       <Head>
//         <title>Occupations</title>
//         <meta name="description" content="Generated by create next app" />
//         <meta name="viewport" content="width=device-width, initial-scale=1" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>
//       <AdminLayout>
//         <div className="row toolbar">
//           <div className="col-lg-4">
//             <InputGroup className="mb-3 ms-3">
//               <InputGroup.Text id="basic-addon1">
//                 <Image
//                   src="/images/icons/search-icon.svg"
//                   width="18"
//                   height="18"
//                   alt=""
//                 ></Image>
//               </InputGroup.Text>
//               <Form.Control
//                 placeholder="Search"
//                 aria-label="search"
//                 aria-describedby="basic-addon1"
//               />
//             </InputGroup>
//           </div>
//           <div className="col-lg-8 d-flex justify-content-end">
//             <Button variant="primary me-4 "> + Create New</Button>
//           </div>
//         </div>
//         {domLoaded ? (
//           <DataTable columns={columns} data={data} pagination />
//         ) : (
//           ""
//         )}
//       </AdminLayout>
//     </div>
//   );
// }




import React, { useState, useEffect } from "react";
import AdminLayout from "@/layouts/AdminLayout";
import Head from "next/head";
import DataTable from "react-data-table-component";
import InputGroup from "react-bootstrap/InputGroup";
import Form from "react-bootstrap/Form";
import Image from "next/image";
import Button from "react-bootstrap/Button";
import { Modal } from "react-bootstrap";

export default function Occupations() {
  const [domLoaded, setDomLoaded] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [metadata, setMetadata] = useState([{ key: "", value: "" }]);
  const [data, setData] = useState([]);
  const [occupationName, setOccupationName] = useState("");
  const [category, setCategory] = useState("");
  const [subcategory, setSubcategory] = useState("");
  const [description, setDescription] = useState("");
  const [selectedOccupation, setSelectedOccupation] = useState(null);

  // Define the categories and subcategories arrays
  const categories = ["Category 1", "Category 2", "Category 3"];
  const subcategories = ["Subcategory 1", "Subcategory 2", "Subcategory 3"];

  const columns = [
    { name: "#", selector: (row) => row.id },
    { name: "Occupation", selector: (row) => row.title },
    { name: "Category", selector: (row) => row.year },
    { name: "Subcategory", selector: (row) => row.subcategory },
    {
      name: "Created On",
      selector: (row) =>
        new Date(row.createdOn).toLocaleDateString("en-GB", {
          day: "numeric",
          month: "long",
          year: "numeric",
        }),
    },
    {
      name: "Action",
      cell: (row) => (
        <div className="d-flex">
          <Button variant="" onClick={() => setSelectedOccupation(row)}style={{ lineHeight: "0.5" }}
        >
          <div className="d-flex">
            {/* ... */}
          <span>.</span>
          <span>.</span>
          <span>.</span>
          </div>
          </Button>
        </div>
      ),
      style: {
        textAlign: "right",
      },
    },
  ];

  const handleOpenCreateModal = () => setShowCreateModal(true);

  const handleCloseCreateModal = () => {
    // Clear the input fields
    setOccupationName("");
    setCategory("");
    setSubcategory("");
    setDescription("");
    setMetadata([{ key: "", value: "" }]);

    // Close the modal
    setShowCreateModal(false);
  };

  const handleAddMetadata = () => {
    setMetadata([...metadata, { key: "", value: "" }]);
  };

  const handleRemoveMetadata = (index) => {
    setMetadata(metadata.filter((_, i) => i !== index));
  };

  const handleMetadataChange = (index, keyOrValue, event) => {
    const newMetadata = [...metadata];
    newMetadata[index][keyOrValue] = event.target.value;
    setMetadata(newMetadata);
  };

  const handleFormSubmit = () => {
    // Here you can add code to submit the form data to your backend or API

    // Add the new occupation to the data array
    setData((prevData) => [
      ...prevData,
      {
        id: prevData.length + 1,
        title: occupationName,
        year: category,
        subcategory,
        description,
        metadata,
        createdOn: new Date(),
      },
    ]);

    // Close the create modal
    handleCloseCreateModal();
  };

  useEffect(() => {
    setDomLoaded(true);
  }, []);

  return (
    <div>
      <Head>
        <title>Occupations</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AdminLayout>
        <div className="row toolbar">
          <div className="col-lg-4">
            <InputGroup className="mb-3 ms-3">
              <InputGroup.Text id="basic-addon1">
                <Image
                  src="/images/icons/search-icon.svg"
                  width="18"
                  height="18"
                  alt=""
                ></Image>
              </InputGroup.Text>
              <Form.Control
                placeholder="Search"
                aria-label="search"
                aria-describedby="basic-addon1"
              />
            </InputGroup>
          </div>
          <div className="col-lg-8 d-flex justify-content-end">
            <Button variant="primary me-4" onClick={handleOpenCreateModal}>
              + Create New
            </Button>
          </div>
        </div>

        {domLoaded ? (
          <>
            <DataTable columns={columns} data={data} pagination />

            {selectedOccupation && (
              <div>
                <h3>{selectedOccupation.title}</h3>
                <p>{selectedOccupation.description}</p>

                <h4>Metadata</h4>
                <ul>
                  {selectedOccupation.metadata.map((data, index) => (
                    <li key={index}>
                      {data.key}: {data.value}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </>
        ) : (
          ""
        )}
      </AdminLayout>

      <Modal show={showCreateModal} onHide={handleCloseCreateModal} className=" modal-lg" >
        <Modal.Header closeButton>
          <Modal.Title>Create New Occupation</Modal.Title>
        </Modal.Header>

        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Occupation Name<span>*</span></Form.Label>
              <Form.Control
                type="text"
                value={occupationName}
                onChange={(event) => setOccupationName(event.target.value)}
              />
            </Form.Group>

            {/* Change the category field to a dropdown */}
            <Form.Group className="mb-3">
              <Form.Label>Category<span>*</span></Form.Label>
              <Form.Select
                value={category}
                onChange={(event) => setCategory(event.target.value)}
              >
                {/* Add a default option */}
                <option value="">Select a category</option>

                {/* Map over the categories array to create option elements */}
                {categories.map((category) => (
                  <option key={category} value={category}>
                    {category}
                  </option>
                ))}
              </Form.Select>
            </Form.Group>

            {/* Change the subcategory field to a dropdown */}
            <Form.Group className="mb-3">
              <Form.Label>Subcategory<span>*</span></Form.Label>
              <Form.Select
                value={subcategory}
                onChange={(event) => setSubcategory(event.target.value)}
              >
                {/* Add a default option */}
                <option value="">Select a subcategory</option>

                {/* Map over the subcategories array to create option elements */}
                {subcategories.map((subcategory) => (
                  <option key={subcategory} value={subcategory}>
                    {subcategory}
                  </option>
                ))}
              </Form.Select>
            </Form.Group>

            {/* Keep the description field as a textarea */}
            <Form.Group className="mb-3">
              <Form.Label>Description<span>*</span></Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                value={description}
                onChange={(event) => setDescription(event.target.value)}
              />
            </Form.Group>

            {/* Keep the metadata fields as text inputs */}
            <hr />
            <h5>Metadata</h5>

            {metadata.map((data, index) => (
              <div key={index} className="d-flex mb-3">
                <Form.Control
                  className="me-2"
                  type="text"
                  placeholder="Key"
                  value={data.key}
                  onChange={(event) =>
                    handleMetadataChange(index, "key", event)
                  }
                />

                <Form.Control
                  type="text"
                  placeholder="Value"
                  value={data.value}
                  onChange={(event) =>
                    handleMetadataChange(index, "value", event)
                  }
                />

                {metadata.length > 1 && (
                  <Button
                    variant="danger ms-2"
                    onClick={() => handleRemoveMetadata(index)}
                  >
                    -
                  </Button>
                )}
              </div>
            ))}

            {/* Keep the add metadata button */}
            <Button variant="" onClick={handleAddMetadata}>
              + Add Metadata
            </Button>
          </Form>
        </Modal.Body>

        {/* Keep the modal footer */}
        <Modal.Footer>
          <Button variant="secondary" onClick={handleCloseCreateModal}>
            Cancel
          </Button>

          {/* Keep the create button */}
          <Button variant="primary" onClick={handleFormSubmit}>
            Create
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
}